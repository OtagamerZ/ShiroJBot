/*
 * This file is part of Shiro J Bot.
 * Copyright (C) 2019-2021  Yago Gimenez (KuuHaKu)
 *
 * Shiro J Bot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Shiro J Bot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Shiro J Bot.  If not, see <https://www.gnu.org/licenses/>
 */
//file:noinspection DifferentStdlibGradleVersion
//file:noinspection GroovyUnusedAssignment
//file:noinspection GroovyAssignabilityCheck

buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id "java"
	id "idea"
	id "antlr"
	id "application"
}

application {
	mainClass.set("com.kuuhaku.Main")
	applicationDefaultJvmArgs = [
			"-Xms512M",
			"-Xmx4G",
			"-XX:MaxDirectMemorySize=2G",
			"-XX:+UseG1GC",
			"-XX:+HeapDumpOnOutOfMemoryError",
			"-XX:HeapDumpPath=logs/memdump.hprof",
			"-Dfile.encoding=UTF-8",
			"-Duser.timezone=America/Sao_Paulo",
			"-Djava.awt.headless=true",
			"-Dsun.java2d.opengl=True",
			"-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector",
			"-Djdk.attach.allowAttachSelf=true",
//			,"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:55000"
	]
}

group = "com.kuuhaku"
version = "STANDALONE"

def javaVersion = JavaVersion.VERSION_25
java {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

repositories {
	mavenCentral()
	maven { url = "https://jitpack.io" }
	maven { url = "https://m2.dv8tion.net/releases" }
	maven { url = "https://oss.sonatype.org/content/repositories/releases/" }
}

run {
	standardInput = System.in
	dependsOn generateGrammarSource
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs
			<< "-Xlint:unchecked"
			<< "-Xlint:deprecation"

	dependsOn enforceVersion
	dependsOn generateGrammarSource
}

tasks.withType(GroovyCompile).configureEach {
	groovyOptions.optimizationOptions.indy = true
}

tasks.register("enforceVersion") {
	def foundVersion = JavaVersion.current()
	if (foundVersion != javaVersion) {
		throw new IllegalStateException("Wrong Java version; required is $javaVersion, but found $foundVersion")
	}
}

configurations.configureEach {
	resolutionStrategy {
		force "org.json:json:20250517"
		force "org.jsoup:jsoup:1.20.1"
		force "com.google.protobuf:protobuf-java:4.31.1"
	}
}

dependencies {
	//Core
	implementation "net.dv8tion:JDA:6.1.0"
	implementation "com.github.ygimenez:Pagination-Utils:6f2285e7f1"
	implementation "com.github.ygimenez:Simple-Moshi:1.1.2"

	//Database
	implementation "org.postgresql:postgresql:42.7.8"
	implementation "jakarta.persistence:jakarta.persistence-api:3.2.0"
	implementation "org.hibernate.orm:hibernate-core:7.0.6.Final"
	implementation "org.hibernate.orm:hibernate-hikaricp:7.0.6.Final"
	implementation "org.hibernate.orm:hibernate-jcache:7.0.6.Final"
	implementation "com.zaxxer:HikariCP:7.0.2"

	//Cache
	implementation "com.github.ben-manes.caffeine:caffeine:3.2.2"
	implementation "com.github.ben-manes.caffeine:jcache:3.2.2"

	//Compiler
	implementation "org.apache.groovy:groovy:5.0.2"

	//Websocket
	implementation "org.java-websocket:Java-WebSocket:1.6.0"

	//Wrappers
	implementation "com.graphql-java:graphql-java:22.2"
	implementation "club.minnced:discord-webhooks:0.8.4"

	//Apache Commons
	implementation "org.apache.commons:commons-lang3:3.19.0"
	implementation "org.apache.commons:commons-text:1.14.0"
	implementation "org.apache.commons:commons-math3:3.6.1"
	implementation "org.apache.commons:commons-imaging:1.0.0-alpha6"
	implementation "org.apache.commons:commons-compress:1.28.0"
	implementation "org.apache.httpcomponents.client5:httpclient5:5.5.1"
	implementation "commons-validator:commons-validator:1.10.0"
	implementation "commons-codec:commons-codec:1.19.0"
	implementation "commons-cli:commons-cli:1.10.0"
	implementation "commons-io:commons-io:2.20.0"

	//Logger
	implementation "org.slf4j:slf4j-api:2.0.17"
	implementation "org.slf4j:slf4j-log4j12:2.0.17"
	implementation "org.apache.logging.log4j:log4j-api:2.25.2"
	implementation "org.apache.logging.log4j:log4j-1.2-api:2.25.2"
	implementation "org.apache.logging.log4j:log4j-core:2.25.2"
	implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.25.2"
	implementation "com.lmax:disruptor:4.0.0"

	//Util
	implementation "it.sauronsoftware.cron4j:cron4j:2.2.5"
	implementation "org.swinglabs.swingx:swingx-graphics:1.6.5-1"
	implementation "org.reflections:reflections:0.10.2"
	implementation "com.squareup.okio:okio:3.16.2"
	implementation "io.github.furstenheim:copy_down:1.1"
	implementation "net.jodah:expiringmap:0.5.11"
	implementation "me.xuender:unidecode:0.0.7"
	implementation "com.github.sbesada:java.math.expression.parser:3.3.0"
	implementation "org.tukaani:xz:1.10"
	implementation "com.vdurmont:emoji-java:5.1.1"
	implementation "org.shredzone.commons:commons-suncalc:3.11"
	implementation "org.knowm.xchart:xchart:3.8.8"
	implementation "com.github.trickl:palette:0.1.1"
	implementation "org.jetbrains:annotations:26.0.2"
	implementation "com.antkorwin:xsync:1.3"
	implementation "com.pngencoder:pngencoder:0.16.0"
	implementation "com.youbenzi:MDTool:1.2.4"
	implementation "net.coobird:thumbnailator:0.4.21"
	implementation "com.jhlabs:filters:2.0.235-1"

	//Antlr
	antlr "org.antlr:antlr4:4.13.2"
	implementation "org.antlr:antlr4-runtime:4.13.2"
}

idea {
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

sourceSets.main {
	java.srcDirs = files(
			"src/main/java",
			"src/main/antlr"
	)
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

generateGrammarSource {
	outputDirectory = file("src/main/antlr/com/kuuhaku/generated")
}
